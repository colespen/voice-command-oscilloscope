{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Visualizer2 = () => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [gain, setGain] = useState(1);\n  const analyserCanvas = React.useRef(null);\n  const audioTest = async () => {\n    if (navigator.mediaDevices.getUserMedia !== null) {\n      const options = {\n        video: false,\n        audio: true\n      };\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(options);\n        const audioCtx = new AudioContext();\n        const analyser = audioCtx.createAnalyser();\n        analyser.fftSize = 2048;\n        const audioSrc = audioCtx.createMediaStreamSource(stream);\n        audioSrc.connect(gainNode); // connect to the gain node\n        gainNode.connect(analyser); // connect to the analyser\n        audioSrc.connect(analyser);\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        const ctx = analyserCanvas.current.getContext(\"2d\");\n        const draw = dataParm => {\n          ctx.clearRect(0, 0, analyserCanvas.current.width, analyserCanvas.current.height); // clear the canvas before drawing\n          dataParm = [...dataParm];\n          ctx.fillStyle = \"white\"; //white background\n          ctx.lineWidth = 2; //width of candle/bar\n          ctx.strokeStyle = \"green\"; //color of candle/bar\n          const space = analyserCanvas.current.width / dataParm.length;\n          dataParm.forEach((value, i) => {\n            ctx.beginPath();\n            ctx.moveTo(space * i, analyserCanvas.current.height); //x,y\n            ctx.lineTo(space * i, analyserCanvas.current.height - value); //x,y\n            ctx.stroke();\n          });\n        };\n        const loopingFunction = () => {\n          requestAnimationFrame(loopingFunction);\n          analyser.getByteFrequencyData(data);\n          draw(data);\n        };\n        requestAnimationFrame(loopingFunction);\n        setStream(stream);\n      } catch (err) {\n        // error handling\n      }\n    }\n  };\n  useEffect(() => {\n    audioTest(gain);\n  }, [gain]);\n  useEffect(() => {\n    if (stream) {\n      audioTest(gain);\n    }\n    console.log(gain);\n  }, [stream, gain]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: analyserCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"gain\",\n        children: \"Gain:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"10\",\n        step: \"0.1\",\n        value: gain,\n        onChange: e => setGain(parseFloat(e.target.value)),\n        id: \"gain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Visualizer2, \"pIAKMPYmUMHTJrZihL+W5ETPAUs=\");\n_c = Visualizer2;\nexport default Visualizer2;\nvar _c;\n$RefreshReg$(_c, \"Visualizer2\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Visualizer2","_s","stream","setStream","gain","setGain","analyserCanvas","useRef","audioTest","navigator","mediaDevices","getUserMedia","options","video","audio","audioCtx","AudioContext","analyser","createAnalyser","fftSize","audioSrc","createMediaStreamSource","connect","gainNode","data","Uint8Array","frequencyBinCount","ctx","current","getContext","draw","dataParm","clearRect","width","height","fillStyle","lineWidth","strokeStyle","space","length","forEach","value","i","beginPath","moveTo","lineTo","stroke","loopingFunction","requestAnimationFrame","getByteFrequencyData","err","console","log","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","min","max","step","onChange","e","parseFloat","target","id","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport \"./index.css\";\n\nconst Visualizer2: React.FC = () => {\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [gain, setGain] = useState(1);\n  const analyserCanvas: any = React.useRef(null);\n\n  const audioTest = async () => {\n    if (navigator.mediaDevices.getUserMedia !== null) {\n      const options = {\n        video: false,\n        audio: true,\n      };\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(options);\n        const audioCtx = new AudioContext();\n        const analyser = audioCtx.createAnalyser();\n        analyser.fftSize = 2048;\n\n        const audioSrc = audioCtx.createMediaStreamSource(stream);\n        audioSrc.connect(gainNode); // connect to the gain node\n        gainNode.connect(analyser); // connect to the analyser\n        audioSrc.connect(analyser);\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        const ctx = analyserCanvas.current.getContext(\"2d\");\n\n        const draw = (dataParm: any) => {\n          ctx.clearRect(\n            0,\n            0,\n            analyserCanvas.current.width,\n            analyserCanvas.current.height\n          ); // clear the canvas before drawing\n          dataParm = [...dataParm];\n          ctx.fillStyle = \"white\"; //white background\n          ctx.lineWidth = 2; //width of candle/bar\n          ctx.strokeStyle = \"green\"; //color of candle/bar\n          const space = analyserCanvas.current.width / dataParm.length;\n\n          dataParm.forEach((value: number, i: number) => {\n            ctx.beginPath();\n            ctx.moveTo(space * i, analyserCanvas.current.height); //x,y\n            ctx.lineTo(space * i, analyserCanvas.current.height - value); //x,y\n            ctx.stroke();\n          });\n        };\n        const loopingFunction = () => {\n          requestAnimationFrame(loopingFunction);\n          analyser.getByteFrequencyData(data);\n          draw(data);\n        };\n        requestAnimationFrame(loopingFunction);\n        setStream(stream);\n      } catch (err) {\n        // error handling\n      }\n    }\n  };\n\n  useEffect(() => {\n    audioTest(gain);\n  }, [gain]);\n\n  useEffect(() => {\n    if (stream) {\n      audioTest(gain);\n    }\n    console.log(gain)\n  }, [stream, gain]);\n\n  return (\n    <>\n      <canvas ref={analyserCanvas} />\n      <div>\n        <label htmlFor=\"gain\">Gain:</label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"10\"\n          step=\"0.1\"\n          value={gain}\n          onChange={(e) => setGain(parseFloat(e.target.value))}\n          id=\"gain\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Visualizer2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}