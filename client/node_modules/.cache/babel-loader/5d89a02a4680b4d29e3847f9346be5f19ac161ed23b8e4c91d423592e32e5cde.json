{"ast":null,"code":"const socket = io();\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n// const startButton = document.querySelector(\"button\");\n// const microphone = document.querySelector(\".fa-microphone\");\n// const output = document.querySelector(\".output\");\n// const loading = document.querySelector(\".lds-ripple\");\n\nrecognition.lang = \"en-US\";\nrecognition.interimResults = false;\nrecognition.continuous = true;\nlet listening = false;\nexport const start = () => {\n  botSpeak(\"Yo! What is good?!\");\n  recognition.start();\n  // output.textContent = \"Listening ... \";\n  // loading.classList.add(\"reveal\");\n  // microphone.classList.add(\"hide\");\n};\n\nexport const stop = () => {\n  recognition.stop();\n  botSpeak(\"Thanks for dropping by!\");\n  // output.textContent = \"Session ended\";\n  // loading.classList.remove(\"reveal\");\n  // microphone.classList.remove(\"hide\");\n};\n\n// startButton.addEventListener(\"click\", () => {\n//   listening ? stop() : start();\n//   listening = !listening;\n// });\n\nrecognition.addEventListener(\"result\", e => {\n  //console.log(e.results); // e.results :SpeechRecognitionResult object\n  const last = e.results.length - 1;\n  const text = e.results[last][0].transcript;\n  socket.emit(\"user message\", text);\n});\nrecognition.addEventListener(\"speechend\", () => {\n  if (listening) {\n    stop();\n  } else {\n    return null;\n  }\n  listening = !listening;\n});\nrecognition.addEventListener(\"error\", e => {\n  console.log(e.error);\n  stop();\n});\n\n// receive message from server\nexport const botSpeak = (text, callback) => {\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(text);\n  synth.speak(utterance);\n  utterance.onend = () => {\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  };\n};\nsocket.on(\"bot message\", answer => {\n  const {\n    msg,\n    link\n  } = answer;\n  botSpeak(msg);\n  if (link) {\n    window.open(link, \"_blank\");\n  }\n});","map":{"version":3,"names":["socket","io","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","listening","start","botSpeak","stop","addEventListener","e","last","results","length","text","transcript","emit","console","log","error","callback","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","onend","on","answer","msg","link","open"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/client/src/util/speechRecognition.js"],"sourcesContent":["const socket = io();\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n// const startButton = document.querySelector(\"button\");\n// const microphone = document.querySelector(\".fa-microphone\");\n// const output = document.querySelector(\".output\");\n// const loading = document.querySelector(\".lds-ripple\");\n\nrecognition.lang = \"en-US\";\nrecognition.interimResults = false;\nrecognition.continuous = true;\nlet listening = false;\n\nexport const start = () => {\n  botSpeak(\"Yo! What is good?!\");\n  recognition.start();\n  // output.textContent = \"Listening ... \";\n  // loading.classList.add(\"reveal\");\n  // microphone.classList.add(\"hide\");\n};\n\nexport const stop = () => {\n  recognition.stop();\n  botSpeak(\"Thanks for dropping by!\");\n  // output.textContent = \"Session ended\";\n  // loading.classList.remove(\"reveal\");\n  // microphone.classList.remove(\"hide\");\n};\n\n// startButton.addEventListener(\"click\", () => {\n//   listening ? stop() : start();\n//   listening = !listening;\n// });\n\nrecognition.addEventListener(\"result\", (e) => {\n  //console.log(e.results); // e.results :SpeechRecognitionResult object\n  const last = e.results.length - 1;\n  const text = e.results[last][0].transcript;\n  socket.emit(\"user message\", text);\n});\n\nrecognition.addEventListener(\"speechend\", () => {\n  if (listening) {\n    stop()\n  } else {\n    return null;\n  }\n  listening = !listening;\n});\n\nrecognition.addEventListener(\"error\", (e) => {\n  console.log(e.error);\n  stop();\n});\n\n// receive message from server\nexport const botSpeak = (text, callback) => {\n  const synth = window.speechSynthesis;\n  const utterance = new SpeechSynthesisUtterance(text);\n  synth.speak(utterance);\n\n  utterance.onend = () => {\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  };\n};\n\nsocket.on(\"bot message\", (answer) => {\n  const { msg, link } = answer;\n  botSpeak(msg);\n  if (link) {\n    window.open(link, \"_blank\");\n  }\n});"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,EAAE,EAAE;AACnB,MAAMC,iBAAiB,GACrBC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;AAC5D,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,EAAE;AAC3C;AACA;AACA;AACA;;AAEAG,WAAW,CAACC,IAAI,GAAG,OAAO;AAC1BD,WAAW,CAACE,cAAc,GAAG,KAAK;AAClCF,WAAW,CAACG,UAAU,GAAG,IAAI;AAC7B,IAAIC,SAAS,GAAG,KAAK;AAErB,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAM;EACzBC,QAAQ,CAAC,oBAAoB,CAAC;EAC9BN,WAAW,CAACK,KAAK,EAAE;EACnB;EACA;EACA;AACF,CAAC;;AAED,OAAO,MAAME,IAAI,GAAGA,CAAA,KAAM;EACxBP,WAAW,CAACO,IAAI,EAAE;EAClBD,QAAQ,CAAC,yBAAyB,CAAC;EACnC;EACA;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA;;AAEAN,WAAW,CAACQ,gBAAgB,CAAC,QAAQ,EAAGC,CAAC,IAAK;EAC5C;EACA,MAAMC,IAAI,GAAGD,CAAC,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC;EACjC,MAAMC,IAAI,GAAGJ,CAAC,CAACE,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAACI,UAAU;EAC1CnB,MAAM,CAACoB,IAAI,CAAC,cAAc,EAAEF,IAAI,CAAC;AACnC,CAAC,CAAC;AAEFb,WAAW,CAACQ,gBAAgB,CAAC,WAAW,EAAE,MAAM;EAC9C,IAAIJ,SAAS,EAAE;IACbG,IAAI,EAAE;EACR,CAAC,MAAM;IACL,OAAO,IAAI;EACb;EACAH,SAAS,GAAG,CAACA,SAAS;AACxB,CAAC,CAAC;AAEFJ,WAAW,CAACQ,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;EAC3CO,OAAO,CAACC,GAAG,CAACR,CAAC,CAACS,KAAK,CAAC;EACpBX,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMD,QAAQ,GAAGA,CAACO,IAAI,EAAEM,QAAQ,KAAK;EAC1C,MAAMC,KAAK,GAAGtB,MAAM,CAACuB,eAAe;EACpC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACV,IAAI,CAAC;EACpDO,KAAK,CAACI,KAAK,CAACF,SAAS,CAAC;EAEtBA,SAAS,CAACG,KAAK,GAAG,MAAM;IACtB,IAAI,OAAON,QAAQ,KAAK,UAAU,EAAE;MAClCA,QAAQ,EAAE;IACZ;EACF,CAAC;AACH,CAAC;AAEDxB,MAAM,CAAC+B,EAAE,CAAC,aAAa,EAAGC,MAAM,IAAK;EACnC,MAAM;IAAEC,GAAG;IAAEC;EAAK,CAAC,GAAGF,MAAM;EAC5BrB,QAAQ,CAACsB,GAAG,CAAC;EACb,IAAIC,IAAI,EAAE;IACR/B,MAAM,CAACgC,IAAI,CAACD,IAAI,EAAE,QAAQ,CAAC;EAC7B;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}