{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/client/src/components/VoiceBot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = \"http://127.0.0.1:8001\";\n//Temporary fix?\nconst socket = io(SERVER, {\n  transports: [\"websocket\"]\n});\nconst VoiceBot = () => {\n  _s();\n  const [listening, setListening] = useState(false);\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = useMemo(() => new SpeechRecognition(), [SpeechRecognition]);\n  recognition.lang = \"en-US\";\n  recognition.interimResults = false;\n  recognition.continuous = true;\n  const handleClick = () => {\n    if (listening) {\n      recognition.stop();\n      botSpeak(\"Until next time!\");\n      setListening(prev => !prev);\n    } else {\n      botSpeak(\"Yo! What is good?!\");\n      recognition.start();\n      setListening(prev => !prev);\n    }\n  };\n  useEffect(() => {\n    recognition.addEventListener(\"result\", e => {\n      //console.log(e.results); // e.results :SpeechRecognitionResult object\n      const last = e.results.length - 1;\n      const text = e.results[last][0].transcript;\n      socket.emit(\"user message\", text);\n    });\n    recognition.addEventListener(\"error\", e => {\n      console.log(e.error);\n      recognition.stop();\n    });\n    recognition.addEventListener(\"speechend\", () => {\n      if (listening) {\n        recognition.stop();\n      } else {\n        return null;\n      }\n      setListening(prev => !prev);\n    });\n  }, [recognition]);\n\n  // receive message from server\n  const botSpeak = text => {\n    //  .speechSynthesis (returns obj --> entry point into Web Speech API)\n    const synth = window.speechSynthesis;\n    //                    SpeechSynthesisUtterance object --> Web Speech API\n    const utterance = new SpeechSynthesisUtterance(text);\n    synth.speak(utterance);\n    // Note: it's possible to have infinite loop if the bot message includes keywords\n  };\n\n  socket.on(\"bot message\", answer => {\n    const {\n      msg,\n      link\n    } = answer;\n    botSpeak(msg);\n    if (link) {\n      // window.open(link, \"_blank\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: [\"mic:\", listening ? \"Listening ...\" : \"Click to surf\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceBot, \"m9URY9q9LYeAijG0YJSJPNzBKbk=\");\n_c = VoiceBot;\nexport default VoiceBot;\nvar _c;\n$RefreshReg$(_c, \"VoiceBot\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","io","jsxDEV","_jsxDEV","SERVER","socket","transports","VoiceBot","_s","listening","setListening","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","handleClick","stop","botSpeak","prev","start","addEventListener","e","last","results","length","text","transcript","emit","console","log","error","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","on","answer","msg","link","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/client/src/components/VoiceBot.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport io from \"socket.io-client\";\n\nimport \"./index.css\";\n\nconst SERVER = \"http://127.0.0.1:8001\";\n//Temporary fix?\nconst socket = io(SERVER, {\n  transports: [\"websocket\"],\n});\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\nconst VoiceBot: React.FC = () => {\n  const [listening, setListening] = useState(false);\n  const SpeechRecognition =\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  const recognition = useMemo(\n    () => new SpeechRecognition(),\n    [SpeechRecognition]\n  );\n\n  recognition.lang = \"en-US\";\n  recognition.interimResults = false;\n  recognition.continuous = true;\n\n  const handleClick = () => {\n    if (listening) {\n      recognition.stop();\n      botSpeak(\"Until next time!\");\n      setListening((prev) => !prev);\n    } else {\n      botSpeak(\"Yo! What is good?!\");\n      recognition.start();\n      setListening((prev) => !prev);\n    }\n  };\n\n  useEffect(() => {\n    recognition.addEventListener(\"result\", (e: { results: string | any[] }) => {\n      //console.log(e.results); // e.results :SpeechRecognitionResult object\n      const last = e.results.length - 1;\n      const text = e.results[last][0].transcript;\n      socket.emit(\"user message\", text);\n    });\n\n    recognition.addEventListener(\"error\", (e: { error: any }) => {\n      console.log(e.error);\n      recognition.stop();\n    });\n    recognition.addEventListener(\"speechend\", () => {\n      if (listening) {\n        recognition.stop();\n      } else {\n        return null;\n      }\n      setListening((prev) => !prev);\n    });\n   \n  }, [recognition]);\n\n \n  \n\n  // receive message from server\n  const botSpeak = (text: string | undefined) => {\n    //  .speechSynthesis (returns obj --> entry point into Web Speech API)\n    const synth = window.speechSynthesis;\n    //                    SpeechSynthesisUtterance object --> Web Speech API\n    const utterance = new SpeechSynthesisUtterance(text);\n\n    synth.speak(utterance);\n    // Note: it's possible to have infinite loop if the bot message includes keywords\n  };\n\n  socket.on(\"bot message\", (answer) => {\n    const { msg, link } = answer;\n    botSpeak(msg);\n    if (link) {\n      // window.open(link, \"_blank\");\n    }\n  });\n\n  return (\n    <button onClick={handleClick}>\n      mic:\n      {listening ? \"Listening ...\" : \"Click to surf\"}\n    </button>\n  );\n};\n\nexport default VoiceBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}