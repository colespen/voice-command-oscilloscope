{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer2 = () => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [gain, setGain] = useState(1);\n  const analyserCanvas = React.useRef(null);\n  const audioTest = async () => {\n    if (navigator.mediaDevices.getUserMedia !== null) {\n      const options = {\n        video: false,\n        audio: true\n      };\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(options);\n        const audioCtx = new AudioContext();\n        const analyser = audioCtx.createAnalyser();\n        analyser.fftSize = 2048;\n        const gainNode = audioCtx.createGain(); // create a gain node\n        gainNode.gain.value = gain;\n        const audioSrc = audioCtx.createMediaStreamSource(stream);\n        audioSrc.connect(gainNode); // connect to the gain node\n        gainNode.connect(analyser); // connect to the analyser\n        audioSrc.connect(analyser);\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        const ctx = analyserCanvas.current.getContext(\"2d\");\n        const draw = dataParm => {\n          ctx.clearRect(0, 0, analyserCanvas.current.width, analyserCanvas.current.height); // clear the canvas before drawing\n          dataParm = [...dataParm];\n          ctx.fillStyle = \"white\"; //white background\n          ctx.lineWidth = 2; //width of candle/bar\n          ctx.strokeStyle = \"green\"; //color of candle/bar\n          const space = analyserCanvas.current.width / dataParm.length;\n          dataParm.forEach((value, i) => {\n            ctx.beginPath();\n            ctx.moveTo(space * i, analyserCanvas.current.height); //x,y\n            ctx.lineTo(space * i, analyserCanvas.current.height - value); //x,y\n            ctx.stroke();\n          });\n        };\n        const loopingFunction = () => {\n          requestAnimationFrame(loopingFunction);\n          analyser.getByteFrequencyData(data);\n          draw(data);\n        };\n        requestAnimationFrame(loopingFunction);\n        setStream(stream);\n      } catch (err) {\n        // error handling\n      }\n    }\n  };\n  useEffect(() => {\n    audioTest();\n  }, []);\n  useEffect(() => {\n    if (stream) {\n      audioTest();\n    }\n  }, [stream]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: analyserCanvas\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n_s(Visualizer2, \"pIAKMPYmUMHTJrZihL+W5ETPAUs=\");\n_c = Visualizer2;\nexport default Visualizer2;\nvar _c;\n$RefreshReg$(_c, \"Visualizer2\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Visualizer2","_s","stream","setStream","gain","setGain","analyserCanvas","useRef","audioTest","navigator","mediaDevices","getUserMedia","options","video","audio","audioCtx","AudioContext","analyser","createAnalyser","fftSize","gainNode","createGain","value","audioSrc","createMediaStreamSource","connect","data","Uint8Array","frequencyBinCount","ctx","current","getContext","draw","dataParm","clearRect","width","height","fillStyle","lineWidth","strokeStyle","space","length","forEach","i","beginPath","moveTo","lineTo","stroke","loopingFunction","requestAnimationFrame","getByteFrequencyData","err","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport \"./index.css\";\n\nconst Visualizer2: React.FC = () => {\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [gain, setGain] = useState(1)\n  const analyserCanvas: any = React.useRef(null);\n\n  const audioTest = async () => {\n    if (navigator.mediaDevices.getUserMedia !== null) {\n      const options = {\n        video: false,\n        audio: true,\n      };\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(options);\n        const audioCtx = new AudioContext();\n        const analyser = audioCtx.createAnalyser();\n        analyser.fftSize = 2048;\n        const gainNode = audioCtx.createGain(); // create a gain node\n        gainNode.gain.value = gain;\n\n        const audioSrc = audioCtx.createMediaStreamSource(stream);\n        audioSrc.connect(gainNode); // connect to the gain node\n        gainNode.connect(analyser);// connect to the analyser\n        audioSrc.connect(analyser);\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        const ctx = analyserCanvas.current.getContext(\"2d\");\n\n        const draw = (dataParm: any) => {\n          ctx.clearRect(\n            0,\n            0,\n            analyserCanvas.current.width,\n            analyserCanvas.current.height\n          ); // clear the canvas before drawing\n          dataParm = [...dataParm];\n          ctx.fillStyle = \"white\"; //white background\n          ctx.lineWidth = 2; //width of candle/bar\n          ctx.strokeStyle = \"green\"; //color of candle/bar\n          const space = analyserCanvas.current.width / dataParm.length;\n\n          dataParm.forEach((value: number, i: number) => {\n            ctx.beginPath();\n            ctx.moveTo(space * i, analyserCanvas.current.height); //x,y\n            ctx.lineTo(space * i, analyserCanvas.current.height - value); //x,y\n            ctx.stroke();\n          });\n        };\n        const loopingFunction = () => {\n          requestAnimationFrame(loopingFunction);\n          analyser.getByteFrequencyData(data);\n          draw(data);\n        };\n        requestAnimationFrame(loopingFunction);\n        setStream(stream);\n      } catch (err) {\n        // error handling\n      }\n    }\n  };\n\n  useEffect(() => {\n    audioTest();\n  }, []);\n\n  useEffect(() => {\n    if (stream) {\n      audioTest();\n    }\n  }, [stream]);\n\n  return (\n  <canvas ref={analyserCanvas} />\n  );\n};\n\nexport default Visualizer2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}