{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Visualizer3 = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const audioRef = useRef(null);\n  const analyser = useRef(null);\n  let animationController;\n  const handleAudioPlay = async () => {\n    const audioContext = new AudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from microphone\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = audioContext.createAnalyser();\n        audioSrc.connect(analyser.current);\n        analyser.current.connect(audioContext.destination);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    visualizeData();\n  };\n  const visualizeData = () => {\n    var _audioRef$current, _analyser$current, _analyser$current2;\n    animationController = window.requestAnimationFrame(visualizeData);\n    if ((_audioRef$current = audioRef.current) !== null && _audioRef$current !== void 0 && _audioRef$current.paused) {\n      return cancelAnimationFrame(animationController);\n    }\n    const songData = new Float32Array(((_analyser$current = analyser.current) === null || _analyser$current === void 0 ? void 0 : _analyser$current.frequencyBinCount) || 0);\n    (_analyser$current2 = analyser.current) === null || _analyser$current2 === void 0 ? void 0 : _analyser$current2.getFloatFrequencyData(songData);\n    const step = AudioContext.sampleRate / songData.length;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx === null || ctx === void 0 ? void 0 : ctx.clearRect(0, 0, canvas.width, canvas.height);\n      let x = 0;\n      let y = canvas.height / 2;\n      for (let i = 0; i < canvas.width; i++) {\n        const index1 = Math.floor(x / step);\n        const index2 = Math.min(index1 + 1, songData.length - 1);\n        const t = x / step % 1;\n        const y1 = y - songData[index1] * canvas.height / 2;\n        const y2 = y - songData[index2] * canvas.height / 2;\n        const level = y1 + (y2 - y1) * t;\n        if (i === 0) {\n          ctx === null || ctx === void 0 ? void 0 : ctx.moveTo(0, level);\n        } else {\n          ctx === null || ctx === void 0 ? void 0 : ctx.lineTo(i, level);\n        }\n        x++;\n      }\n      ctx === null || ctx === void 0 ? void 0 : ctx.stroke();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAudioPlay,\n      children: \"begin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Visualizer3, \"tawXBuctLhS4BGrG6bFB0+/Ku0g=\");\n_c = Visualizer3;\nexport default Visualizer3;\nvar _c;\n$RefreshReg$(_c, \"Visualizer3\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Visualizer3","_s","canvasRef","audioRef","analyser","animationController","handleAudioPlay","audioContext","AudioContext","current","stream","navigator","mediaDevices","getUserMedia","audio","audioSrc","createMediaStreamSource","createAnalyser","connect","destination","error","console","visualizeData","_audioRef$current","_analyser$current","_analyser$current2","window","requestAnimationFrame","paused","cancelAnimationFrame","songData","Float32Array","frequencyBinCount","getFloatFrequencyData","step","sampleRate","length","canvas","ctx","getContext","clearRect","width","height","x","y","i","index1","Math","floor","index2","min","t","y1","y2","level","moveTo","lineTo","stroke","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer3.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\n\nimport \"./index.css\";\n\nconst Visualizer3: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const analyser = useRef<AnalyserNode | null>(null);\n\n  let animationController: number | null;\n\n  const handleAudioPlay = async () => {\n    const audioContext = new AudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from microphone\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = audioContext.createAnalyser();\n        audioSrc.connect(analyser.current);\n        analyser.current.connect(audioContext.destination);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    visualizeData();\n  };\n\n  const visualizeData = () => {\n  animationController = window.requestAnimationFrame(visualizeData);\n  if (audioRef.current?.paused) {\n    return cancelAnimationFrame(animationController);\n  }\n  const songData = new Float32Array(analyser.current?.frequencyBinCount || 0);\n  analyser.current?.getFloatFrequencyData(songData);\n  const step = AudioContext.sampleRate / songData.length;\n  const canvas = canvasRef.current;\n  if (canvas) {\n    const ctx = canvas.getContext(\"2d\");\n    ctx?.clearRect(0, 0, canvas.width, canvas.height);\n    let x = 0;\n    let y = canvas.height / 2;\n    for (let i = 0; i < canvas.width; i++) {\n      const index1 = Math.floor(x / step);\n      const index2 = Math.min(index1 + 1, songData.length - 1);\n      const t = (x / step) % 1;\n      const y1 = y - (songData[index1] * canvas.height) / 2;\n      const y2 = y - (songData[index2] * canvas.height) / 2;\n      const level = y1 + (y2 - y1) * t;\n      if (i === 0) {\n        ctx?.moveTo(0, level);\n      } else {\n        ctx?.lineTo(i, level);\n      }\n      x++;\n    }\n    ctx?.stroke();\n  }\n};\n\n\n  return (\n    <>\n      <button onClick={handleAudioPlay}>begin</button>\n      <canvas ref={canvasRef} width={500} height={500} />\n    </>\n  );\n};\n\nexport default Visualizer3;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}