{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Visualizer3 = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const analyser = useRef(null);\n  const buffer = useRef(null);\n  const bufferSize = 2048;\n  let animationController;\n  const handleAudioPlay = async () => {\n    const audioContext = new AudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from mic input\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = audioContext.createAnalyser();\n        audioSrc.connect(analyser.current);\n        analyser.current.connect(audioContext.destination);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    if (!buffer.current) {\n      buffer.current = new Float32Array(bufferSize);\n    }\n    visualizeData();\n  };\n  const visualizeData = () => {\n    animationController = window.requestAnimationFrame(visualizeData);\n    if (!analyser.current || !buffer.current) {\n      return cancelAnimationFrame(animationController);\n    }\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return;\n    }\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    const bufferLength = analyser.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyser.current.getByteTimeDomainData(dataArray);\n    for (let i = 0; i < bufferSize - bufferLength; i++) {\n      buffer.current[i] = buffer.current[i + bufferLength];\n    }\n    for (let i = 0; i < bufferLength; i++) {\n      buffer.current[bufferSize - bufferLength + i] = (dataArray[i] - 128) / 128;\n    }\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"green\";\n    ctx.beginPath();\n    const sliceWidth = WIDTH * 1.0 / bufferSize;\n    let x = 0;\n    for (let i = 0; i < bufferSize; i++) {\n      const v = buffer.current[i];\n      const y = v * HEIGHT / 2 + HEIGHT / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x += sliceWidth;\n    }\n    ctx.stroke();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAudioPlay,\n      children: \"begin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Visualizer3, \"5V++V2LapOvpfHNQojVCT4o3npI=\");\n_c = Visualizer3;\nexport default Visualizer4;\nvar _c;\n$RefreshReg$(_c, \"Visualizer3\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Visualizer3","_s","canvasRef","analyser","buffer","bufferSize","animationController","handleAudioPlay","audioContext","AudioContext","current","stream","navigator","mediaDevices","getUserMedia","audio","audioSrc","createMediaStreamSource","createAnalyser","connect","destination","error","console","Float32Array","visualizeData","window","requestAnimationFrame","cancelAnimationFrame","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","i","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","v","y","moveTo","lineTo","stroke","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","Visualizer4","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer3.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\n\nimport \"./index.css\";\n\nconst Visualizer3: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const analyser = useRef<AnalyserNode | null>(null);\n  const buffer = useRef<Float32Array | null>(null);\n  const bufferSize = 2048;\n\n  let animationController: number | null;\n\n  const handleAudioPlay = async () => {\n    const audioContext = new AudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from mic input\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = audioContext.createAnalyser();\n        audioSrc.connect(analyser.current);\n        analyser.current.connect(audioContext.destination);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    if (!buffer.current) {\n      buffer.current = new Float32Array(bufferSize);\n    }\n    visualizeData();\n  };\n\n  const visualizeData = () => {\n    animationController = window.requestAnimationFrame(visualizeData);\n    if (!analyser.current || !buffer.current) {\n      return cancelAnimationFrame(animationController!);\n    }\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      return;\n    }\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n    const bufferLength = analyser.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyser.current.getByteTimeDomainData(dataArray);\n    for (let i = 0; i < bufferSize - bufferLength; i++) {\n      buffer.current[i] = buffer.current[i + bufferLength];\n    }\n    for (let i = 0; i < bufferLength; i++) {\n      buffer.current[bufferSize - bufferLength + i] = (dataArray[i] - 128) / 128;\n    }\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"green\";\n    ctx.beginPath();\n    const sliceWidth = (WIDTH * 1.0) / bufferSize;\n    let x = 0;\n    for (let i = 0; i < bufferSize; i++) {\n      const v = buffer.current[i];\n      const y = (v * HEIGHT) / 2 + HEIGHT / 2;\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n      x += sliceWidth;\n    }\n    ctx.stroke();\n  };\n\n  return (\n    <>\n      <button onClick={handleAudioPlay}>begin</button>\n      <canvas ref={canvasRef} width={500} height={500} />\n    </>\n  );\n};\n\nexport default Visualizer4;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}