{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useEffect } from \"react\";\nimport { createAudioContext, createAnalyzerNode, connectAudioStream, getAudioStream } from \"../utils/audioUtils\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizer2 = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const analyser = useRef(null);\n  const handleAudioPlay = async () => {\n    var _analyser$current, _analyser$current2, _analyser$current3, _analyser$current4, _analyser$current5, _analyser$current6;\n    const audioContext = createAudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from mic input\n        const stream = await getAudioStream();\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = createAnalyzerNode(audioContext);\n        connectAudioStream(audioSrc, analyser.current, audioContext.destination);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    const canvas = canvasRef.current;\n    const {\n      width: canvasWidth,\n      height: canvasHeight\n    } = canvas;\n\n    // create a copy of the analyser's properties\n    const analyserProperties = {\n      fftSize: (_analyser$current = analyser.current) === null || _analyser$current === void 0 ? void 0 : _analyser$current.fftSize,\n      frequencyBinCount: (_analyser$current2 = analyser.current) === null || _analyser$current2 === void 0 ? void 0 : _analyser$current2.frequencyBinCount,\n      minDecibels: (_analyser$current3 = analyser.current) === null || _analyser$current3 === void 0 ? void 0 : _analyser$current3.minDecibels,\n      maxDecibels: (_analyser$current4 = analyser.current) === null || _analyser$current4 === void 0 ? void 0 : _analyser$current4.maxDecibels,\n      smoothingTimeConstant: (_analyser$current5 = analyser.current) === null || _analyser$current5 === void 0 ? void 0 : _analyser$current5.smoothingTimeConstant\n    };\n\n    // send payload to web worker\n    worker.postMessage({\n      type: \"start\",\n      payload: {\n        analyser: analyserProperties,\n        canvasWidth,\n        canvasHeight,\n        bufferLength: (_analyser$current6 = analyser.current) === null || _analyser$current6 === void 0 ? void 0 : _analyser$current6.frequencyBinCount\n      }\n    });\n  };\n  const handleAudioStop = () => {\n    worker.postMessage({\n      type: \"stop\"\n    });\n  };\n  const worker = useMemo(() => {\n    const worker = new Worker(new URL(\"../worker/drawer.ts\", import.meta.url));\n    worker.onerror = error => error;\n    return worker;\n  }, []);\n  useEffect(() => {\n    const handleWorkerMessage = event => {\n      const data = event.data;\n      if (data.type === \"draw\") {\n        const {\n          dataArray,\n          bufferLength,\n          sliceWidth\n        } = data;\n        const canvas = canvasRef.current;\n        if (!canvas) {\n          return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          throw new Error(\"canvas context failed.\");\n        }\n        const WIDTH = canvas.width;\n        const HEIGHT = canvas.height;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, WIDTH, HEIGHT);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"green\";\n        ctx.beginPath();\n        let x = 0;\n        let y = HEIGHT / 2;\n        for (let i = 0; i < bufferLength; i++) {\n          const v = dataArray[i];\n          const val = v * 0.5;\n          const yOffset = val * HEIGHT;\n          y = HEIGHT / 2 + yOffset;\n          if (i === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n          x += sliceWidth;\n        }\n        ctx.stroke();\n      } else if (data.type === \"error\") {\n        console.error(data.error);\n      }\n    };\n    if (window.Worker) {\n      worker.onmessage = handleWorkerMessage;\n    }\n    return () => {\n      worker.terminate();\n    };\n  }, [worker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"400\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAudioPlay,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAudioStop,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Visualizer2, \"UVYwZDWitsomsa9CftB0mmOH35c=\");\n_c = Visualizer2;\nexport default Visualizer2;\nvar _c;\n$RefreshReg$(_c, \"Visualizer2\");","map":{"version":3,"names":["React","useRef","useMemo","useEffect","createAudioContext","createAnalyzerNode","connectAudioStream","getAudioStream","jsxDEV","_jsxDEV","Visualizer2","_s","canvasRef","analyser","handleAudioPlay","_analyser$current","_analyser$current2","_analyser$current3","_analyser$current4","_analyser$current5","_analyser$current6","audioContext","current","stream","audioSrc","createMediaStreamSource","destination","error","console","canvas","width","canvasWidth","height","canvasHeight","analyserProperties","fftSize","frequencyBinCount","minDecibels","maxDecibels","smoothingTimeConstant","worker","postMessage","type","payload","bufferLength","handleAudioStop","Worker","URL","import","meta","url","onerror","handleWorkerMessage","event","data","dataArray","sliceWidth","ctx","getContext","Error","WIDTH","HEIGHT","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","x","y","i","v","val","yOffset","moveTo","lineTo","stroke","window","onmessage","terminate","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/src/components/Visualizer2.tsx"],"sourcesContent":["import React, { useRef, useMemo, useEffect } from \"react\";\nimport {\n  createAudioContext,\n  createAnalyzerNode,\n  connectAudioStream,\n  getAudioStream,\n} from \"../utils/audioUtils\";\n\nimport \"./index.css\";\n\nconst Visualizer2: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const analyser = useRef<AnalyserNode | null>(null);\n\n  const handleAudioPlay = async () => {\n    const audioContext = createAudioContext();\n    if (!analyser.current) {\n      try {\n        // Get audio stream from mic input\n        const stream = await getAudioStream();\n        const audioSrc = audioContext.createMediaStreamSource(stream);\n        analyser.current = createAnalyzerNode(audioContext);\n        connectAudioStream(\n          audioSrc,\n          analyser.current,\n          audioContext.destination\n        );\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  \n    const canvas = canvasRef.current;\n    const { width: canvasWidth, height: canvasHeight } = canvas!;\n  \n    // create a copy of the analyser's properties\n    const analyserProperties = {\n      fftSize: analyser.current?.fftSize,\n      frequencyBinCount: analyser.current?.frequencyBinCount,\n      minDecibels: analyser.current?.minDecibels,\n      maxDecibels: analyser.current?.maxDecibels,\n      smoothingTimeConstant: analyser.current?.smoothingTimeConstant,\n    };\n  \n    // send payload to web worker\n    worker.postMessage({\n      type: \"start\",\n      payload: {\n        analyser: analyserProperties,\n        canvasWidth,\n        canvasHeight,\n        bufferLength: analyser.current?.frequencyBinCount,\n      },\n    });\n  };\n  \n\n  const handleAudioStop = () => {\n    worker.postMessage({ type: \"stop\" });\n  };\n\n  const worker: Worker = useMemo(() => {\n    const worker = new Worker(new URL(\"../worker/drawer.ts\", import.meta.url));\n    worker.onerror = (error) => error;\n    return worker;\n  }, []);\n\n  useEffect(() => {\n    const handleWorkerMessage = (event: MessageEvent) => {\n      const data = event.data;\n      if (data.type === \"draw\") {\n        const { dataArray, bufferLength, sliceWidth } = data;\n        const canvas = canvasRef.current;\n        if (!canvas) {\n          return;\n        }\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          throw new Error(\"canvas context failed.\");\n        }\n        const WIDTH = canvas.width;\n        const HEIGHT = canvas.height;\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, WIDTH, HEIGHT);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"green\";\n        ctx.beginPath();\n        let x = 0;\n        let y = HEIGHT / 2;\n        for (let i = 0; i < bufferLength; i++) {\n          const v = dataArray[i];\n          const val = v * 0.5;\n          const yOffset = val * HEIGHT;\n          y = HEIGHT / 2 + yOffset;\n          if (i === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n          x += sliceWidth;\n        }\n        ctx.stroke();\n      } else if (data.type === \"error\") {\n        console.error(data.error);\n      }\n    };\n\n    if (window.Worker) {\n      worker.onmessage = handleWorkerMessage;\n    }\n    return () => {\n      worker.terminate();\n    };\n  }, [worker]);\n\n  return (\n    <div className=\"container\">\n      <canvas ref={canvasRef} width=\"400\" height=\"200\"/>\n      <div className=\"controls\">\n        <button onClick={handleAudioPlay}>Play</button>\n        <button onClick={handleAudioStop}>Stop</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Visualizer2;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACzD,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,cAAc,QACT,qBAAqB;AAE5B,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,SAAS,GAAGX,MAAM,CAA2B,IAAI,CAAC;EACxD,MAAMY,QAAQ,GAAGZ,MAAM,CAAsB,IAAI,CAAC;EAElD,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,iBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,kBAAA;IAClC,MAAMC,YAAY,GAAGjB,kBAAkB,EAAE;IACzC,IAAI,CAACS,QAAQ,CAACS,OAAO,EAAE;MACrB,IAAI;QACF;QACA,MAAMC,MAAM,GAAG,MAAMhB,cAAc,EAAE;QACrC,MAAMiB,QAAQ,GAAGH,YAAY,CAACI,uBAAuB,CAACF,MAAM,CAAC;QAC7DV,QAAQ,CAACS,OAAO,GAAGjB,kBAAkB,CAACgB,YAAY,CAAC;QACnDf,kBAAkB,CAChBkB,QAAQ,EACRX,QAAQ,CAACS,OAAO,EAChBD,YAAY,CAACK,WAAW,CACzB;MACH,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;IAEA,MAAME,MAAM,GAAGjB,SAAS,CAACU,OAAO;IAChC,MAAM;MAAEQ,KAAK,EAAEC,WAAW;MAAEC,MAAM,EAAEC;IAAa,CAAC,GAAGJ,MAAO;;IAE5D;IACA,MAAMK,kBAAkB,GAAG;MACzBC,OAAO,GAAApB,iBAAA,GAAEF,QAAQ,CAACS,OAAO,cAAAP,iBAAA,uBAAhBA,iBAAA,CAAkBoB,OAAO;MAClCC,iBAAiB,GAAApB,kBAAA,GAAEH,QAAQ,CAACS,OAAO,cAAAN,kBAAA,uBAAhBA,kBAAA,CAAkBoB,iBAAiB;MACtDC,WAAW,GAAApB,kBAAA,GAAEJ,QAAQ,CAACS,OAAO,cAAAL,kBAAA,uBAAhBA,kBAAA,CAAkBoB,WAAW;MAC1CC,WAAW,GAAApB,kBAAA,GAAEL,QAAQ,CAACS,OAAO,cAAAJ,kBAAA,uBAAhBA,kBAAA,CAAkBoB,WAAW;MAC1CC,qBAAqB,GAAApB,kBAAA,GAAEN,QAAQ,CAACS,OAAO,cAAAH,kBAAA,uBAAhBA,kBAAA,CAAkBoB;IAC3C,CAAC;;IAED;IACAC,MAAM,CAACC,WAAW,CAAC;MACjBC,IAAI,EAAE,OAAO;MACbC,OAAO,EAAE;QACP9B,QAAQ,EAAEqB,kBAAkB;QAC5BH,WAAW;QACXE,YAAY;QACZW,YAAY,GAAAxB,kBAAA,GAAEP,QAAQ,CAACS,OAAO,cAAAF,kBAAA,uBAAhBA,kBAAA,CAAkBgB;MAClC;IACF,CAAC,CAAC;EACJ,CAAC;EAGD,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5BL,MAAM,CAACC,WAAW,CAAC;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC;EACtC,CAAC;EAED,MAAMF,MAAc,GAAGtC,OAAO,CAAC,MAAM;IACnC,MAAMsC,MAAM,GAAG,IAAIM,MAAM,CAAC,IAAIC,GAAG,CAAC,qBAAqB,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC1EV,MAAM,CAACW,OAAO,GAAIxB,KAAK,IAAKA,KAAK;IACjC,OAAOa,MAAM;EACf,CAAC,EAAE,EAAE,CAAC;EAENrC,SAAS,CAAC,MAAM;IACd,MAAMiD,mBAAmB,GAAIC,KAAmB,IAAK;MACnD,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI;MACvB,IAAIA,IAAI,CAACZ,IAAI,KAAK,MAAM,EAAE;QACxB,MAAM;UAAEa,SAAS;UAAEX,YAAY;UAAEY;QAAW,CAAC,GAAGF,IAAI;QACpD,MAAMzB,MAAM,GAAGjB,SAAS,CAACU,OAAO;QAChC,IAAI,CAACO,MAAM,EAAE;UACX;QACF;QACA,MAAM4B,GAAG,GAAG5B,MAAM,CAAC6B,UAAU,CAAC,IAAI,CAAC;QACnC,IAAI,CAACD,GAAG,EAAE;UACR,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QACA,MAAMC,KAAK,GAAG/B,MAAM,CAACC,KAAK;QAC1B,MAAM+B,MAAM,GAAGhC,MAAM,CAACG,MAAM;QAC5ByB,GAAG,CAACK,SAAS,GAAG,OAAO;QACvBL,GAAG,CAACM,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEH,KAAK,EAAEC,MAAM,CAAC;QACjCJ,GAAG,CAACO,SAAS,GAAG,CAAC;QACjBP,GAAG,CAACQ,WAAW,GAAG,OAAO;QACzBR,GAAG,CAACS,SAAS,EAAE;QACf,IAAIC,CAAC,GAAG,CAAC;QACT,IAAIC,CAAC,GAAGP,MAAM,GAAG,CAAC;QAClB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,YAAY,EAAEyB,CAAC,EAAE,EAAE;UACrC,MAAMC,CAAC,GAAGf,SAAS,CAACc,CAAC,CAAC;UACtB,MAAME,GAAG,GAAGD,CAAC,GAAG,GAAG;UACnB,MAAME,OAAO,GAAGD,GAAG,GAAGV,MAAM;UAC5BO,CAAC,GAAGP,MAAM,GAAG,CAAC,GAAGW,OAAO;UACxB,IAAIH,CAAC,KAAK,CAAC,EAAE;YACXZ,GAAG,CAACgB,MAAM,CAACN,CAAC,EAAEC,CAAC,CAAC;UAClB,CAAC,MAAM;YACLX,GAAG,CAACiB,MAAM,CAACP,CAAC,EAAEC,CAAC,CAAC;UAClB;UACAD,CAAC,IAAIX,UAAU;QACjB;QACAC,GAAG,CAACkB,MAAM,EAAE;MACd,CAAC,MAAM,IAAIrB,IAAI,CAACZ,IAAI,KAAK,OAAO,EAAE;QAChCd,OAAO,CAACD,KAAK,CAAC2B,IAAI,CAAC3B,KAAK,CAAC;MAC3B;IACF,CAAC;IAED,IAAIiD,MAAM,CAAC9B,MAAM,EAAE;MACjBN,MAAM,CAACqC,SAAS,GAAGzB,mBAAmB;IACxC;IACA,OAAO,MAAM;MACXZ,MAAM,CAACsC,SAAS,EAAE;IACpB,CAAC;EACH,CAAC,EAAE,CAACtC,MAAM,CAAC,CAAC;EAEZ,oBACE/B,OAAA;IAAKsE,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBvE,OAAA;MAAQwE,GAAG,EAAErE,SAAU;MAACkB,KAAK,EAAC,KAAK;MAACE,MAAM,EAAC;IAAK;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAClD5E,OAAA;MAAKsE,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBvE,OAAA;QAAQ6E,OAAO,EAAExE,eAAgB;QAAAkE,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eAC/C5E,OAAA;QAAQ6E,OAAO,EAAEzC,eAAgB;QAAAmC,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAAC1E,EAAA,CAlHID,WAAqB;AAAA6E,EAAA,GAArB7E,WAAqB;AAoH3B,eAAeA,WAAW;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}