{"ast":null,"code":"var _jsxFileName = \"/Users/beluga/Documents/Dev/React/audio_visualizer/client/src/components/VoiceBot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = \"http://127.0.0.1:8001\";\nconst socket = io(SERVER, {\n  transports: [\"websocket\"]\n});\nconst VoiceBot = () => {\n  _s();\n  const [listening, setListening] = useState(false);\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = useMemo(() => new SpeechRecognition(), [SpeechRecognition]);\n  recognition.lang = \"en-US\";\n  recognition.interimResults = false;\n  const [isRecognizing, setIsRecognizing] = useState(false);\n  const botSpeak = text => {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    synth.speak(utterance);\n  };\n  const handleClick = () => {\n    if (listening) {\n      recognition.stop();\n      botSpeak(\"Until next time!\");\n    } else {\n      botSpeak(\"Yo! What is good?!\");\n      recognition.start();\n    }\n    setListening(prev => !prev);\n  };\n  useEffect(() => {\n    recognition.onstart = () => {\n      setIsRecognizing(true);\n    };\n    recognition.onend = () => {\n      setIsRecognizing(false);\n      recognition.stop();\n    };\n    recognition.addEventListener(\"result\", e => {\n      const last = e.results.length - 1;\n      const text = e.results[last][0].transcript;\n      if (!isRecognizing) {\n        socket.emit(\"user message\", text);\n        setIsRecognizing(true);\n      }\n    });\n    recognition.addEventListener(\"error\", e => {\n      console.log(e.error);\n      recognition.stop();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [recognition, isRecognizing]);\n  useEffect(() => {\n    socket.on(\"bot message\", answer => {\n      const {\n        msg,\n        link\n      } = answer;\n      botSpeak(msg);\n      if (link) {\n        window.open(link, \"_blank\");\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: [\"mic: \", listening ? \"Listening ...\" : \"Click to surf\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceBot, \"7pa0nuwJHRHnDAM2tfrsPYHsjqE=\");\n_c = VoiceBot;\nexport default VoiceBot;\nvar _c;\n$RefreshReg$(_c, \"VoiceBot\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","io","jsxDEV","_jsxDEV","SERVER","socket","transports","VoiceBot","_s","listening","setListening","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","isRecognizing","setIsRecognizing","botSpeak","text","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","handleClick","stop","start","prev","onstart","onend","addEventListener","e","last","results","length","transcript","emit","console","log","error","on","answer","msg","link","open","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/beluga/Documents/Dev/React/audio_visualizer/client/src/components/VoiceBot.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport io from \"socket.io-client\";\n\nimport \"./index.css\";\n\nconst SERVER = \"http://127.0.0.1:8001\";\nconst socket = io(SERVER, {\n  transports: [\"websocket\"],\n});\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\nconst VoiceBot: React.FC = () => {\n  const [listening, setListening] = useState(false);\n  const SpeechRecognition =\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  const recognition = useMemo(\n    () => new SpeechRecognition(),\n    [SpeechRecognition]\n  );\n\n  recognition.lang = \"en-US\";\n  recognition.interimResults = false;\n\n  const [isRecognizing, setIsRecognizing] = useState(false);\n\n  const botSpeak = (text: string | undefined) => {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    synth.speak(utterance);\n  };\n\n  const handleClick = () => {\n    if (listening) {\n      recognition.stop();\n      botSpeak(\"Until next time!\");\n    } else {\n      botSpeak(\"Yo! What is good?!\");\n      recognition.start();\n    }\n    setListening((prev) => !prev);\n  };\n\n  useEffect(() => {\n    recognition.onstart = () => {\n      setIsRecognizing(true);\n    };\n\n    recognition.onend = () => {\n      setIsRecognizing(false);\n      recognition.stop();\n    };\n\n    recognition.addEventListener(\"result\", (e: { results: string | any[] }) => {\n      const last = e.results.length - 1;\n      const text = e.results[last][0].transcript;\n\n      if (!isRecognizing) {\n        socket.emit(\"user message\", text);\n        setIsRecognizing(true);\n      }\n    });\n\n    recognition.addEventListener(\"error\", (e: { error: any }) => {\n      console.log(e.error);\n      recognition.stop();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [recognition, isRecognizing]);\n\n  useEffect(() => {\n    socket.on(\"bot message\", (answer) => {\n      const { msg, link } = answer;\n      botSpeak(msg);\n      if (link) {\n        window.open(link, \"_blank\");\n      }\n    });\n  }, []);\n\n  return (\n    <button onClick={handleClick}>\n      mic: {listening ? \"Listening ...\" : \"Click to surf\"}\n    </button>\n  );\n};\n\nexport default VoiceBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}